<?php

namespace Whozidis\HallOfFame\Repositories\Eloquent;

use Botble\Base\Models\BaseModel;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Whozidis\HallOfFame\Models\VulnerabilityReport;
use Whozidis\HallOfFame\Repositories\Interfaces\VulnerabilityReportInterface;

class VulnerabilityReportRepository implements VulnerabilityReportInterface
{
    protected Model $model;

    public function __construct(VulnerabilityReport $model)
    {
        $this->model = $model;
    }

    public function createOrUpdate(array $data, array $condition = [])
    {
        if (!empty($condition)) {
            return $this->model->updateOrCreate($condition, $data);
        }

        $model = $this->model->create($data);

        return $model;
    }

    public function findById(int $id)
    {
        return $this->model->find($id);
    }

    public function findOrFail(int $id)
    {
        return $this->model->findOrFail($id);
    }

    public function delete(BaseModel $model)
    {
        return $model->delete();
    }

    public function all()
    {
        return $this->model->all();
    }

    public function getAllBy(array $condition = [])
    {
        return $this->model->where($condition)->get();
    }

    public function getModel()
    {
        return $this->model;
    }

    public function getTable()
    {
        return $this->model->getTable();
    }

    public function applyBeforeExecuteQuery($data, bool $isSingle = false)
    {
        return $data;
    }
}
