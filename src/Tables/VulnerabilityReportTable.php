<?php

namespace Whozidis\HallOfFame\Tables;

use Botble\Base\Enums\BaseStatusEnum;
use Botble\Base\Facades\Html;
use Botble\Table\Abstracts\TableAbstract;
use Botble\Table\Actions\DeleteAction;
use Botble\Table\Actions\EditAction;
use Botble\Table\BulkActions\DeleteBulkAction;
use Botble\Table\Columns\Column;
use Botble\Table\Columns\CreatedAtColumn;
use Botble\Table\Columns\IdColumn;
use Botble\Table\Columns\StatusColumn;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Query\Builder as QueryBuilder;
use Illuminate\Http\JsonResponse;
use Whozidis\HallOfFame\Models\VulnerabilityReport;

class VulnerabilityReportTable extends TableAbstract
{
    public function setup(): void
    {
        $this
            ->model(VulnerabilityReport::class)
            ->addActions([
                EditAction::make()
                    ->route('vulnerability-reports.edit'),
                DeleteAction::make()
                    ->route('vulnerability-reports.destroy'),
            ]);
    }

    public function ajax(): JsonResponse
    {
        $data = $this->table
            ->eloquent($this->query())
            ->editColumn('researcher_name', function (VulnerabilityReport $item) {
                return Html::link(route('vulnerability-reports.edit', $item->id), $item->researcher_name);
            })
            ->editColumn('title', function (VulnerabilityReport $item) {
                return Html::link(route('vulnerability-reports.edit', $item->id), $item->title);
            });

        return $this->toJson($data);
    }

    public function query(): Relation|Builder|QueryBuilder
    {
        $query = $this
            ->getModel()
            ->query()
            ->select([
                'id',
                'title',
                'vulnerability_type',
                'researcher_name',
                'status',
                'created_at',
            ]);

        return $this->applyScopes($query);
    }

    public function columns(): array
    {
        return [
            IdColumn::make(),
            Column::make('title')
                ->title(trans('core/base::tables.title'))
                ->sortable(),
            Column::make('vulnerability_type')
                ->title(trans('plugins/hall-of-fame::vulnerability-reports.vulnerability_type'))
                ->sortable(),
            Column::make('researcher_name')
                ->title(trans('plugins/hall-of-fame::vulnerability-reports.researcher_name'))
                ->sortable(),
            StatusColumn::make(),
            CreatedAtColumn::make(),
        ];
    }

    public function buttons(): array
    {
        return $this->addCreateButton(route('vulnerability-reports.create'), 'vulnerability-reports.create');
    }

    public function bulkActions(): array
    {
        return [
            DeleteBulkAction::make()->permission('vulnerability-reports.destroy'),
        ];
    }

    public function getBulkChanges(): array
    {
        return [
            'title' => [
                'title' => trans('core/base::tables.title'),
                'type' => 'text',
                'validate' => 'required|max:120',
            ],
            'status' => [
                'title' => trans('core/base::tables.status'),
                'type' => 'select',
                'choices' => BaseStatusEnum::labels(),
                'validate' => 'required|in:' . implode(',', BaseStatusEnum::values()),
            ],
            'created_at' => [
                'title' => trans('core/base::tables.created_at'),
                'type' => 'datePicker',
            ],
        ];
    }
}
