<?php

namespace Whozidis\HallOfFame\Http\Controllers;

const VULNERABILITY_REPORT_MODULE_SCREEN_NAME = 'vulnerability-report';

use Botble\Base\Events\BeforeEditContentEvent;
use Botble\Base\Events\CreatedContentEvent;
use Botble\Base\Events\DeletedContentEvent;
use Botble\Base\Events\UpdatedContentEvent;
use Botble\Base\Facades\PageTitle;
use Botble\Base\Forms\FormBuilder;
use Botble\Base\Http\Controllers\BaseController;
use Botble\Base\Http\Responses\BaseHttpResponse;
use Exception;
use Illuminate\Http\Request;
use Whozidis\HallOfFame\Forms\VulnerabilityReportForm;
use Whozidis\HallOfFame\Http\Requests\VulnerabilityReportRequest;
use Whozidis\HallOfFame\Models\VulnerabilityReport;
use Whozidis\HallOfFame\Repositories\Interfaces\VulnerabilityReportInterface;
use Whozidis\HallOfFame\Tables\VulnerabilityReportTable;

class VulnerabilityReportController extends BaseController
{
    public function __construct(protected VulnerabilityReportInterface $vulnerabilityReportRepository)
    {
    }

    public function index(VulnerabilityReportTable $table)
    {
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.name'));

        return $table->renderTable();
    }

    public function create(FormBuilder $formBuilder)
    {
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.create'));

        return $formBuilder->create(VulnerabilityReportForm::class)->renderForm();
    }

    public function store(VulnerabilityReportRequest $request, BaseHttpResponse $response)
    {
        $vulnerabilityReport = $this->vulnerabilityReportRepository->createOrUpdate($request->input());

        event(new CreatedContentEvent(VULNERABILITY_REPORT_MODULE_SCREEN_NAME, $request, $vulnerabilityReport));

        return $response
            ->setPreviousUrl(route('vulnerability-reports.index'))
            ->setNextUrl(route('vulnerability-reports.edit', $vulnerabilityReport->id))
            ->setMessage(trans('core/base::notices.create_success_message'));
    }

    public function edit(int $id, FormBuilder $formBuilder, Request $request)
    {
        $vulnerabilityReport = $this->vulnerabilityReportRepository->findOrFail($id);

        event(new BeforeEditContentEvent($request, $vulnerabilityReport));

        PageTitle::setTitle(trans('core/base::forms.edit_item', ['name' => $vulnerabilityReport->title]));

        return $formBuilder->create(VulnerabilityReportForm::class, ['model' => $vulnerabilityReport])->renderForm();
    }

    public function update(int $id, VulnerabilityReportRequest $request, BaseHttpResponse $response)
    {
        $vulnerabilityReport = $this->vulnerabilityReportRepository->findOrFail($id);

        $vulnerabilityReport->fill($request->input());

        $this->vulnerabilityReportRepository->createOrUpdate($vulnerabilityReport);

        event(new UpdatedContentEvent(VULNERABILITY_REPORT_MODULE_SCREEN_NAME, $request, $vulnerabilityReport));

        return $response
            ->setPreviousUrl(route('vulnerability-reports.index'))
            ->setMessage(trans('core/base::notices.update_success_message'));
    }

    public function destroy(int $id, Request $request, BaseHttpResponse $response)
    {
        try {
            $vulnerabilityReport = $this->vulnerabilityReportRepository->findOrFail($id);

            $this->vulnerabilityReportRepository->delete($vulnerabilityReport);

            event(new DeletedContentEvent(VULNERABILITY_REPORT_MODULE_SCREEN_NAME, $request, $vulnerabilityReport));

            return $response->setMessage(trans('core/base::notices.delete_success_message'));
        } catch (Exception $exception) {
            return $response
                ->setError()
                ->setMessage($exception->getMessage());
        }
    }

    public function approve(int $id, BaseHttpResponse $response)
    {
        $vulnerabilityReport = $this->vulnerabilityReportRepository->findOrFail($id);

        $vulnerabilityReport->status = 'published';
        $vulnerabilityReport->is_published = true;
        $vulnerabilityReport->published_at = now();

        $this->vulnerabilityReportRepository->createOrUpdate($vulnerabilityReport);

        return $response
            ->setPreviousUrl(route('vulnerability-reports.index'))
            ->setMessage(trans('plugins/hall-of-fame::vulnerability-reports.approve_success'));
    }

    public function reject(int $id, Request $request, BaseHttpResponse $response)
    {
        $vulnerabilityReport = $this->vulnerabilityReportRepository->findOrFail($id);

        $vulnerabilityReport->status = 'rejected';
        $vulnerabilityReport->admin_note = $request->input('admin_note');

        $this->vulnerabilityReportRepository->createOrUpdate($vulnerabilityReport);

        return $response
            ->setPreviousUrl(route('vulnerability-reports.index'))
            ->setMessage(trans('plugins/hall-of-fame::vulnerability-reports.reject_success'));
    }
}
