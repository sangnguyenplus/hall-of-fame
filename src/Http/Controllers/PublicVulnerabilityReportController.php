<?php

namespace Whozidis\HallOfFame\Http\Controllers;

use Botble\Base\Facades\Assets;
use Botble\Base\Facades\PageTitle;
use Botble\Base\Forms\FormBuilder;
use Botble\Base\Http\Controllers\BaseController;
use Botble\Base\Http\Responses\BaseHttpResponse;
use Botble\Media\Facades\RvMedia;
use Botble\SeoHelper\Facades\SeoHelper;
use Botble\Theme\Facades\Theme;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\View;
use Whozidis\HallOfFame\Forms\PublicVulnerabilityReportForm;
use Whozidis\HallOfFame\Http\Requests\PublicVulnerabilityReportRequest;
use Whozidis\HallOfFame\Mail\VulnerabilityReportSubmitted;
use Whozidis\HallOfFame\Models\VulnerabilityAttachment;
use Whozidis\HallOfFame\Models\VulnerabilityReport;

class PublicVulnerabilityReportController extends BaseController
{
    public function index()
    {
        if (! is_plugin_active('hall-of-fame')) {
            abort(404);
        }

        // Set the Hall of Fame theme layout
        Theme::setLayout('hall-of-fame');

        // Set page title and SEO
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'));
        SeoHelper::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'))
            ->setDescription(trans('plugins/hall-of-fame::vulnerability-reports.page_description'));

        // Set breadcrumbs  
        Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'));
        
        try {
            $reports = VulnerabilityReport::where('is_published', true)
                ->orderBy('created_at', 'desc')
                ->paginate(20);
        } catch (\Exception $e) {
            Log::error('Error fetching vulnerability reports: ' . $e->getMessage());
            // Create empty paginator instead of collection
            $reports = new \Illuminate\Pagination\LengthAwarePaginator(
                collect(), 0, 20, 1, [
                    'path' => request()->url(),
                    'pageName' => 'page',
                ]
            );
        }

        // Use theme integration with correct method
        return Theme::of('plugins/hall-of-fame::public.index', compact('reports'))->render();
    }

    public function create()
    {
        if (! is_plugin_active('hall-of-fame')) {
            abort(404);
        }

        // Set theme layout and breadcrumbs (match show method exactly)
        \Botble\Theme\Facades\Theme::setLayout('hall-of-fame');
        \Botble\Theme\Facades\Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.submit_report'), route('public.vulnerability-reports.create'));

        // Check if anonymous submissions are allowed from admin settings
        $allowAnonymous = (bool) setting('hall_of_fame_reports_allow_anonymous', false);
        
        if (!$allowAnonymous && !hof_researcher_authenticated()) {
            // If anonymous submissions are disabled and user is not authenticated, redirect to login
            return redirect()->route('public.hall-of-fame.auth.login', ['redirect' => route('public.vulnerability-reports.create')]);
        }

        // Use theme integration with correct method (match show method exactly)
        return \Botble\Theme\Facades\Theme::of('plugins/hall-of-fame::public.submit', [])->render();
    }

    public function store(PublicVulnerabilityReportRequest $request, BaseHttpResponse $response)
    {
        $data = $request->validated();
        unset($data['attachments'], $data['privacy_policy'], $data['g-recaptcha-response']);
        
        $vulnerabilityReport = new VulnerabilityReport();
        $vulnerabilityReport->fill($data);
        $vulnerabilityReport->status = 'pending';
        // Don't link to CMS users - Hall of Fame has separate authentication
        $vulnerabilityReport->user_id = null;
        $vulnerabilityReport->save();

        // Send notification email
        try {
            Mail::to($vulnerabilityReport->researcher_email)
                ->send(new VulnerabilityReportSubmitted($vulnerabilityReport));
        } catch (\Exception $exception) {
            info('Error sending vulnerability report notification: ' . $exception->getMessage());
        }

        // Handle attachments
        $files = $request->validated()['attachments'] ?? [];
        if (!empty($files)) {
            foreach ($files as $file) {
                if ($file->isValid()) {
                    $fileUpload = RvMedia::handleUpload($file, 0, 'hall-of-fame/attachments');
                    if ($fileUpload['error'] === false) {
                        $attachment = new VulnerabilityAttachment();
                        $attachment->vulnerability_report_id = $vulnerabilityReport->id;
                        $attachment->file_name = $file->getClientOriginalName();
                        $attachment->file_path = $fileUpload['data']->url;
                        $attachment->file_size = $file->getSize();
                        $attachment->file_mime = $file->getMimeType();

                        // Determine file type
                        $mimeType = $file->getMimeType();
                        if (str_starts_with($mimeType, 'image/')) {
                            $attachment->file_type = 'image';
                        } elseif (str_starts_with($mimeType, 'video/')) {
                            $attachment->file_type = 'video';
                        } else {
                            $attachment->file_type = 'document';
                        }

                        $attachment->save();
                    }
                }
            }
        }

        // Set theme layout and breadcrumbs
        \Botble\Theme\Facades\Theme::setLayout('hall-of-fame');
        \Botble\Theme\Facades\Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.thank_you'));

        return \Botble\Theme\Facades\Theme::of('plugins/hall-of-fame::public.thank-you', compact('vulnerabilityReport'))->render();
    }

    public function show($id)
    {
        $report = VulnerabilityReport::where('is_published', true)
            ->where('id', $id)
            ->firstOrFail();

        // Set theme layout and breadcrumbs
        \Botble\Theme\Facades\Theme::setLayout('hall-of-fame');
        \Botble\Theme\Facades\Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'))
            ->add($report->title);

        return \Botble\Theme\Facades\Theme::of('plugins/hall-of-fame::public.show', compact('report'))->render();
    }

    public function hall()
    {
        $years = VulnerabilityReport::where('is_published', true)
            ->selectRaw('YEAR(created_at) as year')
            ->distinct()
            ->orderBy('year', 'desc')
            ->pluck('year');

        $reports = [];
        foreach ($years as $year) {
            $reports[$year] = VulnerabilityReport::where('is_published', true)
                ->whereYear('created_at', $year)
                ->orderBy('created_at', 'desc')
                ->get();
        }

        // Set theme layout and breadcrumbs
        \Botble\Theme\Facades\Theme::setLayout('hall-of-fame');
        \Botble\Theme\Facades\Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'));

        return \Botble\Theme\Facades\Theme::of('plugins/hall-of-fame::public.hall', compact('reports', 'years'))->render();
    }

    public function myReports(Request $request)
    {
        if (!$request->hasValidSignature()) {
            abort(401);
        }

        $reports = VulnerabilityReport::where('researcher_email', $request->get('email'))
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        // Set theme layout and breadcrumbs
        \Botble\Theme\Facades\Theme::setLayout('hall-of-fame');
        \Botble\Theme\Facades\Theme::breadcrumb()
            ->add(__('Home'), route('public.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'), route('public.hall-of-fame.index'))
            ->add(trans('plugins/hall-of-fame::vulnerability-reports.my_reports_breadcrumb'));

        return \Botble\Theme\Facades\Theme::of('plugins/hall-of-fame::public.my-reports', compact('reports'))->render();
    }
}
