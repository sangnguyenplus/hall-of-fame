<?php

namespace Whozidis\HallOfFame\Http\Controllers;

use Botble\Base\Facades\PageTitle;
use Botble\Base\Http\Controllers\BaseController;
use Botble\Base\Http\Responses\BaseHttpResponse;
use Botble\Media\Facades\RvMedia;
use Botble\SeoHelper\Facades\SeoHelper;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Whozidis\HallOfFame\Forms\PublicVulnerabilityReportForm;
use Whozidis\HallOfFame\Http\Requests\PublicVulnerabilityReportRequest;
use Whozidis\HallOfFame\Mail\VulnerabilityReportSubmitted;
use Whozidis\HallOfFame\Models\VulnerabilityAttachment;
use Whozidis\HallOfFame\Models\VulnerabilityReport;

class PublicVulnerabilityReportController extends BaseController
{
    public function index()
    {
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'));
        SeoHelper::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'));

        $reports = VulnerabilityReport::where('is_published', true)
            ->where('status', 'published')
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        return view('plugins/hall-of-fame::public.index', compact('reports'));
    }

    public function create()
    {
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.submit_a_vulnerability'));
        SeoHelper::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.submit_a_vulnerability'));

        $form = app(PublicVulnerabilityReportForm::class);

        return view('plugins/hall-of-fame::public.submit', compact('form'));
    }

    public function store(PublicVulnerabilityReportRequest $request, BaseHttpResponse $response)
    {
        $vulnerabilityReport = new VulnerabilityReport();
        $vulnerabilityReport->fill($request->except(['attachments', 'privacy_policy', 'g-recaptcha-response']));
        $vulnerabilityReport->status = 'pending';
        $vulnerabilityReport->save();

        // Send notification email
        try {
            Mail::to($vulnerabilityReport->researcher_email)
                ->send(new VulnerabilityReportSubmitted($vulnerabilityReport));
        } catch (\Exception $exception) {
            info('Error sending vulnerability report notification: ' . $exception->getMessage());
        }

        // Handle attachments
        if ($request->hasFile('attachments')) {
            foreach ($request->file('attachments') as $file) {
                $fileUpload = RvMedia::handleUpload($file, 0, 'hall-of-fame/attachments');
                if ($fileUpload['error'] === false) {
                    $attachment = new VulnerabilityAttachment();
                    $attachment->vulnerability_report_id = $vulnerabilityReport->id;
                    $attachment->file_name = $file->getClientOriginalName();
                    $attachment->file_path = $fileUpload['data']->url;
                    $attachment->file_size = $file->getSize();
                    $attachment->file_mime = $file->getMimeType();

                    // Determine file type
                    $mimeType = $file->getMimeType();
                    if (str_starts_with($mimeType, 'image/')) {
                        $attachment->file_type = 'image';
                    } elseif (str_starts_with($mimeType, 'video/')) {
                        $attachment->file_type = 'video';
                    } else {
                        $attachment->file_type = 'document';
                    }

                    $attachment->save();
                }
            }
        }

        return view('plugins/hall-of-fame::public.thank-you', compact('vulnerabilityReport'));
    }

    public function show($id)
    {
        $report = VulnerabilityReport::where('is_published', true)
            ->where('status', 'published')
            ->where('id', $id)
            ->firstOrFail();

        PageTitle::setTitle($report->title);
        SeoHelper::setTitle($report->title);

        return view('plugins/hall-of-fame::public.show', compact('report'));
    }

    public function hall()
    {
        PageTitle::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'));
        SeoHelper::setTitle(trans('plugins/hall-of-fame::vulnerability-reports.hall_of_fame'));

        $years = VulnerabilityReport::where('status', 'published')
            ->where('is_published', true)
            ->selectRaw('YEAR(created_at) as year')
            ->distinct()
            ->orderBy('year', 'desc')
            ->pluck('year');

        $reports = [];
        foreach ($years as $year) {
            $reports[$year] = VulnerabilityReport::where('status', 'published')
                ->where('is_published', true)
                ->whereYear('created_at', $year)
                ->orderBy('created_at', 'desc')
                ->get();
        }

        return view('plugins/hall-of-fame::public.hall', compact('reports', 'years'));
    }
}
